#!/usr/bin/env python
import toml
import argparse
import os
import subprocess
import loguru

loguru.logger.disable("config.c")

from config.c import c

def update_toml_value(file_path, toml_path, value):
	try:
		with open(file_path, "r") as f:
			data = toml.load(f)
	except FileNotFoundError:
		print(f"Error: File '{file_path}' not found.")
		return
	except toml.TomlDecodeError:
		print(f"Error: Invalid TOML syntax in '{file_path}'.")
		return

	keys = toml_path.split(".")
	temp = data
	for key in keys[:-1]:
		temp = temp.setdefault(key, {})

	temp[keys[-1]] = value

	with open(file_path, "w") as f:
		toml.dump(data, f)

	print(f"Successfully updated '{toml_path}' to {value} in '{file_path}'")

def get_toml_value(toml_path):
	return c.get_rule(toml_path)

def edit_toml_value(file_path, toml_path):
	try:
		with open(file_path, "r") as f:
			data = toml.load(f)
	except FileNotFoundError:
		print(f"Error: File '{file_path}' not found.")
		return
	except toml.TomlDecodeError:
		print(f"Error: Invalid TOML syntax in '{file_path}'.")
		return

	keys = toml_path.split(".")
	temp = data
	for key in keys[:-1]:
		temp = temp.setdefault(key, {})

	print(f"Current value of '{toml_path}': {c.get_rule(toml_path)}")
	new_value = input("Enter new value: ")

	if new_value.lower() in ["true", "false"]:
		new_value = new_value.lower() == "true"
	elif new_value.isdigit():
		new_value = int(new_value)
	else:
		try:
			new_value = float(new_value)
		except ValueError:
			pass  # Keep as string

	temp[keys[-1]] = new_value

	with open(file_path, "w") as f:
		toml.dump(data, f)

	print(f"Updated '{toml_path}' to {new_value} in '{file_path}'")

def restart_module(module):
	modules = {
		"Dock": "Dock",
		"Panel": "Panel",
		"Notifications": "Notifications",
		"Shell": "envShell",
		"all": ["Dock", "Panel", "Notifications"],
	}
	if module not in modules:
		print(f"Error: Invalid module '{module}'.")
		return
	module = modules[module]
	if isinstance(module, list):
		for m in module:
			subprocess.run(["pkill", "-x", m])
	else:
		subprocess.run(["pkill", "-x", module])

def main():
	parser = argparse.ArgumentParser(description="Manage EnvShell configuration.")
	subparsers = parser.add_subparsers(dest="command", required=True)

	update_parser = subparsers.add_parser("update", help="Update a setting with a value.")
	update_parser.add_argument("settings_path", help="Path to the settings (e.g., example.path.test)")
	update_parser.add_argument("value", help="New value for the setting")

	edit_parser = subparsers.add_parser("edit", help="Edit a settings value interactively and push it to the config.")
	edit_parser.add_argument("settings_path", help="Path to the setting")

	reset_parser = subparsers.add_parser("reset", help="Delete the temporary configuration file.")

	restart_parser = subparsers.add_parser("restart", help="Restart a Shell Module process.")
	restart_parser.add_argument("module", help="Module to restart (Options: Dock, Panel, Notifications, Shell)")

	get_parser = subparsers.add_parser("get", help="Get a settings value.")
	get_parser.add_argument("settings_path", help="Path to the setting (e.g., example.path.test)")

	args = parser.parse_args()

	file_path = os.path.join(os.path.expanduser("~"), ".config", "envshell", "temp.toml")

	if args.command == "update":
		value = args.value

		if value.lower() in ["true", "false"]:
			value = value.lower() == "true"
		elif value.isdigit():
			value = int(value)
		else:
			try:
				value = float(value)
			except ValueError:
				pass  # Keep as string

		update_toml_value(file_path, args.settings_path, value)
	elif args.command == "edit":
		edit_toml_value(file_path, args.settings_path)
	elif args.command == "reset":
		if os.path.exists(file_path):
			os.remove(file_path)
			print("Configuration file deleted.")
		else:
			print("No configuration file to delete.")
	elif args.command == "restart":
		restart_module(args.module)
	elif args.command == "get":
		value = get_toml_value(args.settings_path)
		print(f"Value of '{args.settings_path}': {value}")
	else:
		parser.print_help()

if __name__ == "__main__":
	main()
